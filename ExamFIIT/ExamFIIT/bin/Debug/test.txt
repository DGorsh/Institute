using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

//1. Считается, что ввод файла корректен с точки зрения формата данных: (Фамилия Должность Зарплата(Число) Телефон
//Строгий формат номеров телефона не учитывается, считается, что ввод телефона корректен в формате +7-000-000-00-00
//Поскольку об этом не сказано в задании.
//Тем не менее проверка зарплаты осуществлена.


namespace ExamFIIT
{
    class cFieldData
    {
        private string ppSurname; //Фамилия
        private string ppStatus; //Должность
        private uint ppPrize; //Зарплата
        private string ppPhone; //Телефон
        //
        //конструктор
        public cFieldData(string tSurname, string tStatus, string tPrize, string tPhone)
        {
            ppSurname = tSurname;
            ppStatus = tStatus;

            try
            {
                ppPrize = Convert.ToUInt32(tPrize);
            } catch (Exception e)
            {
                throw new Exception("Не удалось сконвертировать в число"); //исключение на случай неудачной конвертации.
            }

            ppPhone = tPhone;
        }

        //вывод данных в виде строки
        public string ToString()
        {
            StringBuilder StringData = new StringBuilder(ppSurname);
            StringData.Append(" ").Append(ppStatus).Append(" ").Append(ppPrize.ToString()).Append(" ").Append(ppPhone);
            return StringData.ToString();
        }

        //геттер-сеттер на значение зарплаты
        public uint vPrize
        {
            get { return ppPrize; }
            set { ppPrize = value; }
        }

        //геттер-сеттер на значение Фамилии
        public string vSurname
        {
            get { return ppSurname; }
            set { ppSurname = value; }
        }

        //геттер-сеттер на значение должности
        public string vStatus
        {
            get { return ppStatus; }
            set { ppStatus = value; }
        }
    }

    //Класс сравнения для дальнейшей сортировки по значению зарплаты
    class PrizeComparer : IComparer<cFieldData>
    {
        public int Compare(cFieldData tElem1, cFieldData tElem2)
        {
            if (tElem1.vPrize > tElem2.vPrize)
            {
                return 1;
            }
            else if (tElem1.vPrize < tElem2.vPrize)
            {
                return -1;
            }

            return 0;
        }
    }

    class Program
    {
        static void Main(string[] args)
        {
            //0. загрузка данных из файла
            string CurInFile; //входной файл
            Console.WriteLine("Введите название файла: ");
            CurInFile = Console.ReadLine();
            StreamReader ldInFile = null;
            try
            {
                //Открытие файла и проверка на существование (через try-catch)
                ldInFile = new StreamReader(CurInFile, System.Text.Encoding.Default);


                //1. чтение файла построчно и заполнение списка
                List<cFieldData> PersonList = new List<cFieldData>(); // дин. структура.
                string tCurrentLine; // текущая строка
                while (!ldInFile.EndOfStream)
                {
                    tCurrentLine = ldInFile.ReadLine();
                    //заполнение элемента списка.
                    while (tCurrentLine.IndexOf("  ") != -1) tCurrentLine = tCurrentLine.Replace("  ", " "); //убираем лишние пробелы
                    string[] tTempData = tCurrentLine.Split(' '); //делим строку на поля с помощью разделителя "пробел"
                    //формируем и вносим
                    PersonList.Add(new cFieldData(tTempData[0], tTempData[1], tTempData[2], tTempData[3]));
                }
                //Вывод
                Console.WriteLine("п 1. Вывод полученной коллекции:");
                Console.WriteLine(OutputList(PersonList));

                //2. Вывод данных по зарплате.
                //Прим. Здесь не создается дубликата изначальной коллекции, т.к. не сказано, что необходимо сохранять именно 
                //изначальную коллекцию до манипуляций в п. 2,3,4.
                PrizeComparer tPC = new PrizeComparer(); //экземпляр класса для сравнеия зарплат
                PersonList.Sort(tPC);
                Console.WriteLine("п 2. Вывод коллекции, отсортированной по росту ЗП:");
                Console.WriteLine(OutputList(PersonList));


                //3. Вывод тех, у кого более 90%
                //Выводит только фамилии и должности (по заданию)
                //3.1. Подсчет среднего.
                decimal MOPrize = 0; //искомая средняя ЗП
                foreach (var Item in PersonList)
                    MOPrize += Item.vPrize;
                MOPrize /= PersonList.Count;
                Console.WriteLine("п 3. Вывод элементов, имеющих ЗП выше средней на 20%:");
                Console.Write("Средняя ЗП = ");
                Console.WriteLine(MOPrize);

                //3.2 Вывод значений
                StringBuilder tResult = new StringBuilder();
                foreach (var Item in PersonList)
                {
                    if (Item.vPrize > MOPrize * (decimal)1.10) //decimal * double - конфликт типов.
                    {
                        tResult.AppendLine(Item.vSurname).Append(" ").Append(Item.vStatus);
                    }
                }
                Console.WriteLine(tResult.ToString());


                Console.ReadKey();
            }
            catch (Exception e)
            {
                Console.WriteLine(e.Message);
                Console.ReadKey();
            }

        }


        //метод для вывода коллекции
        static string OutputList(List<cFieldData> tList)
        {
            StringBuilder Result = new StringBuilder();
            foreach (var Item in tList)
                Result.Append(Item.ToString()).Append("\n");
            return Result.ToString();
        }

    }

}
